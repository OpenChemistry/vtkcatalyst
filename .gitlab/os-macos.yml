# macOS-specific builder configurations and build commands

## Base configurations

.macos:
    variables:
        GIT_CLONE_PATH: "$CI_BUILDS_DIR/catalyst-ci-ext/$CI_CONCURRENT_ID"
        # TODO: Factor this out so that each job selects the Xcode version to
        # use so that different versions can be tested in a single pipeline.
        DEVELOPER_DIR: "/Applications/Xcode-13.3.app/Contents/Developer"

### Build and test

.macos_build:
    extends: .macos

    variables:
        # Note that shell runners only support runners with a single
        # concurrency level. We can't use `$CI_CONCURRENCY_ID` because this may
        # change between the build and test stages which CMake doesn't support.
        # Even if we could, it could change if other runners on the machine
        # could run at the same time, so we drop it.
        GIT_CLONE_PATH: "$CI_BUILDS_DIR/catalyst-ci"

.macos_arm64_replay:
    extends: .macos_build

    variables:
        CMAKE_CONFIGURATION: macos_arm64_replay
        CTEST_NO_WARNINGS_ALLOWED: 1

.macos_x86_64_replay:
    extends: .macos_build

    variables:
        CMAKE_CONFIGURATION: macos_x86_64_replay
        CTEST_NO_WARNINGS_ALLOWED: 1

## Tags

.macos_x86_64_builder_tags:
    tags:
        - paraview
        - macos
        - shell
        - xcode-13.3
        - concurrent

.macos_arm64_builder_tags:
    tags:
        - paraview
        - macos-arm64
        - shell
        - xcode-13.3
        - concurrent

## macOS-specific scripts

.before_script_macos: &before_script_macos
    - .gitlab/ci/cmake.sh
    - .gitlab/ci/ninja.sh
    - export PATH=$PWD/.gitlab:$PWD/.gitlab/cmake/bin:$PATH
    - cmake --version
    - ninja --version
    - .gitlab/ci/gtest.sh

.cmake_build_macos:
    stage: build-test

    script:
        - *before_script_macos
        - ctest -VV -S .gitlab/ci/ctest_configure.cmake
        - ctest -VV -S .gitlab/ci/ctest_build.cmake
        - ctest --output-on-failure -V -S .gitlab/ci/ctest_test.cmake
    timeout: 5 minutes
